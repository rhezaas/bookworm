# dependencies stage
FROM docker.io/library/node:18-alpine AS deps

RUN apk add --no-cache libc6-compat && \
    npm install -g npm@9.8.1 && \
    npm --version

WORKDIR /app
COPY package.json package-lock.json ./
RUN npm install --frozen-lockfile

# build stage
FROM docker.io/library/node:18-alpine AS builder
WORKDIR /app
COPY src/ ./src
COPY public/ ./public 
COPY next-env.d.ts tsconfig.json tslint.json .
COPY --from=deps /app/node_modules ./node_modules
COPY --from=deps /app/package.json ./package.json
RUN ls -la && npm run build

# final stage
FROM docker.io/library/node:18-alpine AS runner
WORKDIR /app

ARG API_HOST
ARG WEB_HOST

ENV NODE_ENV production
ENV NEXT_TELEMETRY_DISABLED 1
ENV PORT 3000
ENV API_HOST=$API_HOST
ENV WEB_HOST=$WEB_HOST

RUN addgroup -g 1001 -S nodejs && \
    adduser -S nextjs -u 1001

COPY --from=builder /app/public ./public
COPY --from=builder --chown=nextjs:nodejs /app/.next ./.next
COPY --from=builder /app/node_modules ./node_modules
COPY --from=builder /app/package.json ./package.json

USER nextjs

CMD ["node_modules/.bin/next", "start"]
EXPOSE 3000